
Sobrecarga

• É um recurso que uma classe possui de oferecer mais de uma 
operação com o mesmo nome, porém com diferentes listas de 
parâmetros 

Exemplo:
public Produto() {
}
public Produto(string nome, double preco, int quantidade) {
Nome = nome;
Preco = preco;
Quantidade = quantidade;
}

public Produto(string nome, double preco) {
Nome = nome;
Preco = preco;
Quantidade = 0;
} 

//Temos dois construtores com o mesmo nome com diferentes parametros

/////////////////////////////////////////////////////////////////////////////////////
ENCAPSULAMENTO
• É um princípio que consiste em 
esconder detalhes de implementação 
de um componente, expondo apenas 
operações seguras e que o mantenha 
em um estado consistente.

• Regra de ouro: o objeto deve sempre 
estar em um estado consistente, e a 
própria classe deve garantir isso.

Opção 1: implementação manual
• Todo atributo é definido como private
• Implementa-se métodos Get e Set para cada atributo, conforme 
regras de negócio
• Nota: não é usual na plataforma C#

EXEMPLO:
using System.Globalization;
namespace Course {


           class Produto {
           private string _nome;
           private double _preco;
           private int _quantidade;

           public Produto() {
          }

          public Produto(string nome, double preco, int quantidade) {
         _nome = nome;
         _preco = preco;
         _quantidade = quantidade;
         }

         public string GetNome() {
         return _nome;
         }

           public void SetNome(string nome) {
          if (nome != null && nome.Length > 1) {
         _nome = nome;
       }
     }

          public double GetPreco() {
         return _preco;
         }

         public int GetQuantidade() {
         return _quantidade;
         }

         public double ValorTotalEmEstoque() {
         return _preco * _quantidade;
         }

         public void AdicionarProdutos(int quantidade) {
        _quantidade += quantidade;
        }

       public void RemoverProdutos(int quantidade) {
       _quantidade -= quantidade;
       }

         public override string ToString() {
         return _nome
         + ", $ "
        + _preco.ToString("F2", CultureInfo.InvariantCulture)
        + ", "
        + _quantidade
        + " unidades, Total: $ "
        + ValorTotalEmEstoque().ToString("F2", CultureInfo.InvariantCulture);
       }
   }
}

 GET = Obter Objeto
 SET = Definir objeto
 PRIVATE = Propriedades so podem ser alteradas por métodos

////////////////////////////////////////////////////////////////////////////////////////
AUTO PROPERTIES
(prop tab tab)

Propriedades autoimplementadas

• É uma forma simplificada de se declarar propriedades que não 
necessitam lógicas particulares para as operações get e set. 
https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/auto-implemented-properties

public double Preco { get; private set; }

 EXEMPLO
    using System.Globalization;
    namespace Course {
       class Produto {
          private string _nome;
          public double Preco { get; private set; }
          public double Quantidade { get; set; }
          public Produto() {
          }

          public Produto(string nome, double preco, int quantidade) {
               _nome = nome;
               Preco = preco;
               Quantidade = quantidade;
            }

            public string Nome {
            get { return _nome; }
            set {
            if (value != null && value.Length > 1) {
            _nome = value;
           }
      }
}


           public double ValorTotalEmEstoque {
           get { return Preco * Quantidade; }
           }

           public void AdicionarProdutos(int quantidade) {
              Quantidade += quantidade;
           }

           public void RemoverProdutos(int quantidade) {
           Quantidade -= quantidade;
          }

          public override string ToString() {
          return _nome
               + ", $ "
               + Preco.ToString("F2", CultureInfo.InvariantCulture)
               + ", "
               + Quantidade
               + " unidades, Total: $ "
               + ValorTotalEmEstoque.ToString("F2", CultureInfo.InvariantCulture);
            }
      }
}


